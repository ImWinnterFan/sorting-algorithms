#10/21
# -*- coding: utf-8 -*-
"""sorting

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11duWM67fvxBn214eOgXGhAtpngKEM_ma
"""

import random
import time
import matplotlib.pyplot as plt

def selection_sort(arr):
#小さい値を探して左に寄せる [O(n^2)]（選択ソート）

  n = len(arr)
  for i in range(n):#Arrの回数を測る
    min_index = i #最小値を置く場所

    for j in range(i+1,n):#残りの中から最小値を探す（範囲）
      if arr [j] < arr[min_index]:
        min_index = j

    arr[i],arr[min_index]=arr[min_index],arr[i]
  return arr

def bubble_sort(arr):
#隣り合う数字を比較し大きい場合右に移動[O(n^2)]

  n = len(arr)#Arrの長さを測る
  for i in range(n):#Arrの長さ文だけ実行、実行回数は I
    for j in range(0, n-i-1):#比較する範囲の数を J

      if arr[j] > arr[j+1]: #大きい数を右にもってくる
          arr[j],arr[j+1] = arr[j+1],arr[j]
  return arr

def measure_time(sort_func, arr):

  start = time.perf_counter() #Pythonで一番精度がいいタイマー
  sort_func(arr.copy()) #元のデータを保持するため
  end = time.perf_counter()#終了時の時刻を取得

  return end - start #経過時間

if __name__ == "__main__": #__name__はこのファイル実行時に、ここを動かすという意味

  sizes = [100,200,400,800,1600,3200,6400,12000]#生成する数のリスト

  times_selection=[] #処理時間の空のリスト
  times_bubble=[]

  for n in sizes:#処理開始（ループ）
    arr=[random.randint(0,10000) for _ in range(n)]

    t1 = measure_time(selection_sort,arr)#t1の処理時間
    t2 = measure_time(bubble_sort,arr)

    times_selection.append(t1)#リストに処理時間を追加
    times_bubble.append(t2)

    print(f"n={n:4d} Selection Sort={t1:6f} sec, Bubble Sort={t2:.6f}sec")#t1は整数4桁、t2は小数6桁まで

plt.figure(figsize=(8,6))
plt.plot(sizes,times_selection,marker="o",label="Selection Sort")
plt.plot(sizes,times_bubble,marker="s",label="Bubble Sort")

plt.xlabel("Input size n")
plt.ylabel("Execution time [sec]")
plt.title("Sorting Algorithms Runtime Comparison")
plt.legend()
plt.grid(True)
plt.show()
